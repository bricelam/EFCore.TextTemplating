// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace EFCore.TextTemplating
{
    using System.Linq;
    using System.Text;
    using Microsoft.EntityFrameworkCore;
    using Microsoft.EntityFrameworkCore.Design;
    using Microsoft.EntityFrameworkCore.Metadata;
    using Microsoft.EntityFrameworkCore.Metadata.Conventions;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    internal partial class MyEntityTypeConfigurationGenerator : EFCore.TextTemplating.MyCodeGeneratorBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("using Microsoft.EntityFrameworkCore;\r\nusing Microsoft.EntityFrameworkCore.Metadat" +
                    "a.Builders;\r\nusing ");
            this.Write(this.ToStringHelper.ToStringWithCulture(ModelNamespace));
            this.Write(";\r\n\r\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            this.Write("\r\n{\r\n    public class ");
            this.Write(this.ToStringHelper.ToStringWithCulture(EntityType.Name));
            this.Write("Configuration : IEntityTypeConfiguration<");
            this.Write(this.ToStringHelper.ToStringWithCulture(EntityType.Name));
            this.Write(">\r\n    {\r\n        public void Configure(EntityTypeBuilder<");
            this.Write(this.ToStringHelper.ToStringWithCulture(EntityType.Name));
            this.Write("> builder)\r\n        {\r\n");

    var primaryKey = EntityType.FindPrimaryKey();
    if (primaryKey == null)
    {

            this.Write("            builder.HasNoKey();\r\n\r\n");

    }
    else if (!Enumerable.SequenceEqual(
        primaryKey.Properties,
        KeyDiscoveryConvention.DiscoverKeyProperties(
                (IConventionEntityType)primaryKey.DeclaringEntityType,
                primaryKey.DeclaringEntityType.GetProperties().Cast<IConventionProperty>())
            .Cast<IProperty>()))
    {

            this.Write("            builder.HasKey(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Code.Lambda(primaryKey.Properties)));
            this.Write(");\r\n\r\n");

    }

    var schema = EntityType.GetSchema();
    var scaffoldSchema = schema != null && schema != EntityType.Model.GetDefaultSchema();

    var tableName = EntityType.GetTableName();
    var isView = EntityType.FindAnnotation("Relational:ViewDefinition") != null;
    var scaffoldTable = scaffoldSchema || isView || tableName != (string)EntityType["Scaffolding:DbSetName"];

    if (scaffoldTable)
    {

            this.Write("            builder.");
            this.Write(this.ToStringHelper.ToStringWithCulture(isView ? "ToView" : "ToTable"));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(scaffoldSchema ? Code.Literal(schema) + ", " : ""));
            this.Write(this.ToStringHelper.ToStringWithCulture(Code.Literal(tableName)));
            this.Write(");\r\n\r\n");

    }

    foreach (var index in EntityType.GetIndexes().Where(i => i.IsUnique))
    {

            this.Write("            builder.HasIndex(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Code.Lambda(index.Properties)));
            this.Write(")\r\n                .IsUnique();\r\n\r\n");

    }

    foreach (var property in EntityType.GetProperties())
    {
        var originalGenerationEnvironment = GenerationEnvironment;
        GenerationEnvironment = new StringBuilder();

        var columnName = property.GetColumnName();
        if (columnName != property.Name)
        {

            this.Write("                .HasColumnName(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Code.Literal(columnName)));
            this.Write(")\r\n");

        }

        var columnType = (string)property["Relational:ColumnType"];
        if (columnType != null)
        {

            this.Write("                .HasColumnType(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Code.Literal(columnType)));
            this.Write(")\r\n");

        }

        if (property.IsUnicode() == false)
        {

            this.Write("                .IsUnicode(false)\r\n");

        }

        if (property.IsFixedLength() == true)
        {

            this.Write("                .IsFixedLength()\r\n");

        }

        if (property.GetDefaultValue() != null
            || property.GetDefaultValueSql() != null)
        {

            this.Write("                .HasDefaultValue()\r\n");

        }

        if (property.GetComputedColumnSql() != null)
        {

            this.Write("                .HasComputedColumnSql(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Code.Literal(columnName)));
            this.Write(")\r\n");

        }

        var valueGenerated = property.ValueGenerated;
        var isRowVersion = false;
        if (((IConventionProperty)property).GetValueGeneratedConfigurationSource().HasValue
            && valueGenerated != RelationalValueGenerationConvention.GetValueGenerated(property))
        {
            if (valueGenerated == ValueGenerated.OnAddOrUpdate
                && property.IsConcurrencyToken)
            {
                isRowVersion = true;

            this.Write("                .IsRowVersion()\r\n");

            }
            else
            {

            this.Write("                .ValueGenerated");
            this.Write(this.ToStringHelper.ToStringWithCulture(valueGenerated));
            this.Write("()\r\n");

            }
        }

        if (property.IsConcurrencyToken && !isRowVersion)
        {

            this.Write("                .IsConcurrencyToken()\r\n");

        }

        var propertyConfiguration = GenerationEnvironment.ToString();
        GenerationEnvironment = originalGenerationEnvironment;

        if (propertyConfiguration.Length != 0)
        {

            this.Write("            builder.Property(e => e.");
            this.Write(this.ToStringHelper.ToStringWithCulture(property.Name));
            this.Write(")\r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(propertyConfiguration.Trim()));
            this.Write(";\r\n\r\n");

        }
    }

    foreach (var foreignKey in EntityType.GetForeignKeys())
    {
        var originalGenerationEnvironment = GenerationEnvironment;
        GenerationEnvironment = new StringBuilder();

        if (!foreignKey.PrincipalKey.IsPrimaryKey())
        {

            this.Write("                .HasPrincipalKey");
            this.Write(this.ToStringHelper.ToStringWithCulture(foreignKey.IsUnique ? "<" + foreignKey.PrincipalEntityType.Name + ">" : ""));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Code.Lambda(foreignKey.PrincipalKey.Properties)));
            this.Write(")\r\n");

        }


            this.Write("                .HasForeignKey");
            this.Write(this.ToStringHelper.ToStringWithCulture(foreignKey.IsUnique ? "<" + foreignKey.DeclaringEntityType.Name + ">" : ""));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Code.Lambda(foreignKey.Properties)));
            this.Write(")\r\n");


        var defaultDeleteBehavior = foreignKey.IsRequired ? DeleteBehavior.Cascade : DeleteBehavior.ClientSetNull;
        if (foreignKey.DeleteBehavior != defaultDeleteBehavior)
        {

            this.Write("                .OnDelete(");
            this.Write(this.ToStringHelper.ToStringWithCulture(Code.Literal(foreignKey.DeleteBehavior)));
            this.Write(")\r\n");

        }

        var relationshipConfiguration = GenerationEnvironment.ToString();
        GenerationEnvironment = originalGenerationEnvironment;


            this.Write("            builder.HasOne(");
            this.Write(this.ToStringHelper.ToStringWithCulture(foreignKey.DependentToPrincipal != null ? "d => d." + foreignKey.DependentToPrincipal.Name : ""));
            this.Write(").");
            this.Write(this.ToStringHelper.ToStringWithCulture(foreignKey.IsUnique ? "WithOne" : "WithMany"));
            this.Write("(");
            this.Write(this.ToStringHelper.ToStringWithCulture(foreignKey.PrincipalToDependent != null ? "p => p." + foreignKey.PrincipalToDependent.Name : ""));
            this.Write(")\r\n                ");
            this.Write(this.ToStringHelper.ToStringWithCulture(relationshipConfiguration.Trim()));
            this.Write(";\r\n\r\n");

    }

            this.Write("        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }

private global::Microsoft.EntityFrameworkCore.Metadata.IEntityType _EntityTypeField;

/// <summary>
/// Access the EntityType parameter of the template.
/// </summary>
private global::Microsoft.EntityFrameworkCore.Metadata.IEntityType EntityType
{
    get
    {
        return this._EntityTypeField;
    }
}

private string _ModelNamespaceField;

/// <summary>
/// Access the ModelNamespace parameter of the template.
/// </summary>
private string ModelNamespace
{
    get
    {
        return this._ModelNamespaceField;
    }
}

private string _NamespaceField;

/// <summary>
/// Access the Namespace parameter of the template.
/// </summary>
private string Namespace
{
    get
    {
        return this._NamespaceField;
    }
}

private bool _UseDataAnnotationsField;

/// <summary>
/// Access the UseDataAnnotations parameter of the template.
/// </summary>
private bool UseDataAnnotations
{
    get
    {
        return this._UseDataAnnotationsField;
    }
}

private global::Microsoft.EntityFrameworkCore.Design.ICSharpHelper _CodeField;

/// <summary>
/// Access the Code parameter of the template.
/// </summary>
private global::Microsoft.EntityFrameworkCore.Design.ICSharpHelper Code
{
    get
    {
        return this._CodeField;
    }
}

private global::Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator _AnnotationCodeField;

/// <summary>
/// Access the AnnotationCode parameter of the template.
/// </summary>
private global::Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator AnnotationCode
{
    get
    {
        return this._AnnotationCodeField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public override void Initialize()
{
    base.Initialize();
    if ((this.Errors.HasErrors == false))
    {
bool EntityTypeValueAcquired = false;
if (this.Session.ContainsKey("EntityType"))
{
    this._EntityTypeField = ((global::Microsoft.EntityFrameworkCore.Metadata.IEntityType)(this.Session["EntityType"]));
    EntityTypeValueAcquired = true;
}
if ((EntityTypeValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("EntityType");
    if ((data != null))
    {
        this._EntityTypeField = ((global::Microsoft.EntityFrameworkCore.Metadata.IEntityType)(data));
    }
}
bool ModelNamespaceValueAcquired = false;
if (this.Session.ContainsKey("ModelNamespace"))
{
    this._ModelNamespaceField = ((string)(this.Session["ModelNamespace"]));
    ModelNamespaceValueAcquired = true;
}
if ((ModelNamespaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ModelNamespace");
    if ((data != null))
    {
        this._ModelNamespaceField = ((string)(data));
    }
}
bool NamespaceValueAcquired = false;
if (this.Session.ContainsKey("Namespace"))
{
    this._NamespaceField = ((string)(this.Session["Namespace"]));
    NamespaceValueAcquired = true;
}
if ((NamespaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Namespace");
    if ((data != null))
    {
        this._NamespaceField = ((string)(data));
    }
}
bool UseDataAnnotationsValueAcquired = false;
if (this.Session.ContainsKey("UseDataAnnotations"))
{
    this._UseDataAnnotationsField = ((bool)(this.Session["UseDataAnnotations"]));
    UseDataAnnotationsValueAcquired = true;
}
if ((UseDataAnnotationsValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("UseDataAnnotations");
    if ((data != null))
    {
        this._UseDataAnnotationsField = ((bool)(data));
    }
}
bool CodeValueAcquired = false;
if (this.Session.ContainsKey("Code"))
{
    this._CodeField = ((global::Microsoft.EntityFrameworkCore.Design.ICSharpHelper)(this.Session["Code"]));
    CodeValueAcquired = true;
}
if ((CodeValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("Code");
    if ((data != null))
    {
        this._CodeField = ((global::Microsoft.EntityFrameworkCore.Design.ICSharpHelper)(data));
    }
}
bool AnnotationCodeValueAcquired = false;
if (this.Session.ContainsKey("AnnotationCode"))
{
    this._AnnotationCodeField = ((global::Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator)(this.Session["AnnotationCode"]));
    AnnotationCodeValueAcquired = true;
}
if ((AnnotationCodeValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("AnnotationCode");
    if ((data != null))
    {
        this._AnnotationCodeField = ((global::Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator)(data));
    }
}


    }
}


    }
}
